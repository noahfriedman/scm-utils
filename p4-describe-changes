#!/usr/bin/env perl
# p4-describe-changes - combine p4 change and p4 describe -s
# Author: Noah Friedman <friedman@splode.com>
# Created: 2014-11-13
# Public domain.

# $Id$

# Commentary:
# Code:

use strict;

use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use lib "$ENV{HOME}/lib/perl";

use Getopt::Long;
use Pod::Usage;
use POSIX qw(strftime);

use NF::P4cmd qw(:direct);

my %opt = ( traditional => 0, );

sub parse_options
{
  my $help = -1;

  p4_process_cmdline_options ($_[0]);
  local *ARGV = \@{$_[0]}; # modify our local arglist, not real ARGV.

  my $parser = Getopt::Long::Parser->new;
  $parser->configure (qw(no_bundling pass_through));
  my $succ = $parser->getoptions
    ( "D|debug"       => \$NF::P4cmd::DEBUG,
      "h|help+"       => \$help,

      "t|traditional" => \$opt{traditional},
    );

  pod2usage (-exitstatus => 1, -verbose => 0)     unless $succ;
  pod2usage (-exitstatus => 0, -verbose => $help) if $help >= 0;
}

sub get_changes
{
  map { $_->{change} } p4 ("changes", @_);
}

sub get_describe
{
  p4 (\@_, "describe", "-S", "-s");
}

# This is slightly different from the standard output from p4
sub describe_change
{
  my $change = shift;
  return unless $change->{code} eq 'stat';  # todo: print error messages

  my $stamp = strftime ("%Y-%m-%d %H:%M:%S%z", localtime ($change->{time}));

  my $status = ($change->{status} eq 'submitted'
                ? ""
                : sprintf (" *%s*", $change->{status}));

  printf("%s %d %s@%s %s%s\n\n",
         (exists $change->{shelved} ? "Shelf" : "Change"),
         $change->{change},
         $change->{user},
         $change->{client},
         $stamp,
         $status);

  (my $desc = $change->{desc}) =~ s/^/\t/mg;
  print $desc, "\n";

  map { printf("... %-4s  %-11s  %s\n",
               '#' . shift @{$change->{rev}},
               shift @{$change->{action}},
               $_)
      } @{$change->{depotFile}};
  print "\n";
}


sub main
{
  parse_options (\@_);

  my @changelist = get_changes (@_);
  if ($opt{traditional})
    {
      get_describe (@changelist);
    }
  else
    {
      map { describe_change ($_) } get_describe (@changelist);
    }

  return $?;
}

main (@ARGV);

1;

__END__

=head1 NAME

 p4-describe-changes - combine "p4 changes" with "p4 describe -s"

=head1 SYNOPSIS

     {-D|--debug}            {--p4user   USER}
     {-h|--help}             {--p4port   PORT}
     {-t|--traditional}      {--p4client CLIENT}
                             {--p4dir    DIR}
                             {--p4host   HOST}

     (plus any args to pass to "p4 changes" to limit scope of results)

 The -h option may be repeated up to 3 times for increased verbosity.

=head1 OPTIONS

Long-format options may be abbreviated as long as the result is not ambiguous.

=over 8

=item B<-t>, B<--traditional>

Use builtin C<p4 describe> output format instead of slightly modified custom
format implemented in this script.

=back

=head1 DESCRIPTION

The command

    p4-describe-changes p14.2/...@\>2014/11/11,\<2014/11/12

performs essentially the more torturous equivalent of

    p4 changes p14.2/...@\>2014/11/11,\<2014/11/12  | awk '{print $2}' | p4 -x - describe -s

but with the same or easier-to-read results.

The usual flags to C<p4 changes> work, e.g.

    p4-describe-changes -s pending -u noahf //depot/main/...

Use the B<--p4*> options to override P4PORT, P4USER, etc.

=cut
