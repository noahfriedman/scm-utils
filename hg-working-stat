#!/usr/bin/env perl
# hg-working-stat -- collect stat information about mercurial working files
# Author: Noah Friedman <friedman@splode.com>
# Created: 2010-03-22
# Public domain

# $Id$

# Commentary:

# Mercurial doesn't preserve file modes, timestamps, security contexts, and
# other errata when updating a workspace.  This command can be used to
# generate a checkpoint of this data in a workspace, and then restore it
# after doing an update.

# The format of the output is: user group perm mtime selinux_context filename

# Code:

use strict;
use warnings qw(all);

use Symbol;
use File::ExtAttr qw(:all);

sub max { my $m = shift; map { $m = $_ if $_ > $m } @_; return $m }

sub bt
{
  open( my $fh, '-|', @_ ) or die "exec: $_[0]: $!\n";
  local $/ = wantarray ? $/ : undef;
  return <$fh>;
}


sub timestamps
{
  my %ts;

  map { chomp;
        my ($t, $o, @files) = split( /\s+/, $_ );
        my $ts = $t + $o;
        map { $ts{$_} = $ts } @files;
      } bt( qw(hg log -r0:. --template), '{date|hgdate} {files}\n', @_ );

  return \%ts;
}

sub main
{
  my @files = bt( qw(hg manifest -r.) );
  chomp @files;

  my $ts = timestamps( @files );
  my %data;
  map { my %f;
        my @st       =  lstat( $_ );
        $f{owner}    =  getpwuid( $st[4] );
        $f{group}    =  getgrgid( $st[5] );
        $f{mode}     =  $st[2] & 07777;
        $f{mtime}    =  $ts->{$_};
        $f{context}  =  getfattr( $_, 'selinux', { namespace => 'security' } );
        $f{context}  =~ s/\0//g;

        $data{$_} = \%f;
      } @files;

  my $ctxlen = max( map { length $data{$_}->{context} } keys %data );
  my $fmtctx = sprintf( "%%-%ds", $ctxlen );
  my $fmt = "%s %s %4.4o %10s $fmtctx %s\n";

  map { local *d = $data{$_};
        printf( $fmt, @::d{qw(owner group mode mtime context)}, $_ );
      } @files;
}

main (@ARGV);

# eof
