#!/usr/bin/env perl
# p4-fstat --- pretty-printer for various p4 file operations
# Author: Noah Friedman <friedman@splode.com>
# Created: 2016-08-18
# Public domain

# $Id: p4-fstat,v 1.2 2017/04/18 00:26:48 friedman Exp $

# Commentary:

# This is easier to read and workspace paths are more useful.

# Code:

use strict;
use warnings qw(all);

use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use lib "$ENV{HOME}/lib/perl";

use Getopt::Long;
use Pod::Usage;

use NF::P4cmd qw(:direct);

my %opt;

my @flags;
my @filter;

# Fields we request from server
my @fieldsT = (qw(depotFile clientFile path  haveRev
                  headAction headChange headRev headType
                      action     change workRev     type));

# Fields we print per row, in order
my @fieldsP = (qw(headAction headChange headRev headType));
# Fields we print per row if file is open
my @fieldsO = (qw(action change workRev type));

# Fields which are right-justified
my @fieldRJ = (undef, 0, 1, 1, 0); # undef is for clientFile/depotFile

sub parse_options
{
  my $help = -1;

  p4_process_cmdline_options ($_[0]);
  local *ARGV = \@{$_[0]}; # modify our local arglist, not real ARGV.

  my $pthrough = sub { push @flags, join ("", '-', @_) };

  my $parser = Getopt::Long::Parser->new;
  $parser->configure (qw(bundling autoabbrev no_ignore_case));
  my $succ = $parser->getoptions
    ( "debug"        => \$NF::P4cmd::DEBUG,
      "h|?|help+"    => \$help,

      "l|local-path" => \$opt{localpath},

      # Note that we use -e, not -c, for speed and least surprise since -c
      # also matches any *later* change, a behavior which is not consistent
      # with most other commands. If you really want fstat -c, use after --.
      'c|change=i'   => sub { push @flags, "-e", $_[1] },
      'm|max=i'      => sub { push @flags, "-m", $_[1] },
      'F|filter=s@'  => \@filter,

      'O=s@'         => $pthrough,
      'R=s@'         => $pthrough,
      'S=s@'         => $pthrough,

      "H|have"       => sub { push @flags, "-Rh" },
      "o|opened"     => sub { push @flags, "-Ro" },
      "e|exists"     => sub { push @filter,
                                (qw(^headAction=delete
                                    ^headAction=move/delete
                                    ^headAction=purge
                                  ));
                            },

      "p=s"          => \$ENV{OVERRIDE_P4PORT},
      "u=s"          => \$ENV{OVERRIDE_P4USER},
    );

  pod2usage (-exitstatus => 1, -verbose => 0)     unless $succ;
  pod2usage (-exitstatus => 0, -verbose => $help) if $help >= 0;
}

sub main
{
  parse_options (\@_);

  push @flags, "-F", join (" & ", @filter) if @filter;
  push @flags, "-T", join (",",   @fieldsT);

  my @data = p4 (qw(fstat), @flags, @_);
  die $data[0]->{data} if $data[0]->{code} eq 'error';

  my $xFile = $opt{localpath} ? 'clientFile' : 'depotFile';

  my @w;
  my @toprint;
  for my $r (@data)
    {
      # Skip entries that only contain 'desc' when using '-e changelist'
      next unless exists $r->{depotFile};

      # We might not have clientFile if we have no current client or path
      # is not mapped.
      my @row = exists $r->{$xFile} ? $r->{$xFile} : $r->{depotFile};
      if (exists $r->{action})
        {
          push @row, @{$r}{@fieldsO};
          substr ($row[1], 0, 0, '*'); # prepend
        }
      else
        {
          push @row, @{$r}{@fieldsP};
          substr ($row[1], 0, 0, ' ');
        }
      substr ($row[3], 0, 0, '#');

      for (my $i = 0; $i < @row; $i++)
        {
          my $len = length ($row[$i]);
          $w[$i] = $len if !defined $w[$i] || $len > $w[$i];
        }
      push @toprint, \@row;
    }

  my @rj = @fieldRJ;
  my $fmt = join ("  ", map { join ("",
                                    (shift @rj ? "%" : "%-"),
                                    $_, "s")
                            } @w) . "\n";
  map { printf $fmt, @$_ } @toprint;
}

main (@ARGV);

# eof
